--- envoy/bazel/repositories.bzl
+++ envoy/bazel/repositories.bzl
@@ -142,18 +142,13 @@ def envoy_dependencies(skip_targets = []):
     # Setup external Bazel rules
     _foreign_cc_dependencies()
 
-    # Binding to an alias pointing to the selected version of BoringSSL:
-    # - BoringSSL FIPS from @boringssl_fips//:ssl,
-    # - non-FIPS BoringSSL from @boringssl//:ssl.
-    _boringssl()
-    _boringssl_fips()
     native.bind(
         name = "ssl",
-        actual = "@envoy//bazel:boringssl",
+        actual = "@bssl-compat//:bssl-compat",
     )
     native.bind(
         name = "crypto",
-        actual = "@envoy//bazel:boringcrypto",
+        actual = "@bssl-compat//:bssl-compat",
     )
 
     # The long repo names (`com_github_fmtlib_fmt` instead of `fmtlib`) are
--- envoy/source/extensions/extensions_build_config.bzl
+++ envoy/source/extensions/extensions_build_config.bzl
@@ -351,10 +351,10 @@ EXTENSIONS = {
     # QUIC extensions
     #
 
-    "envoy.quic.deterministic_connection_id_generator": "//source/extensions/quic/connection_id_generator:envoy_deterministic_connection_id_generator_config",
-    "envoy.quic.crypto_stream.server.quiche":           "//source/extensions/quic/crypto_stream:envoy_quic_default_crypto_server_stream",
-    "envoy.quic.proof_source.filter_chain":             "//source/extensions/quic/proof_source:envoy_quic_default_proof_source",
-    "envoy.quic.server_preferred_address.fixed":        "//source/extensions/quic/server_preferred_address:fixed_server_preferred_address_config_factory_config",
+    # "envoy.quic.deterministic_connection_id_generator": "//source/extensions/quic/connection_id_generator:envoy_deterministic_connection_id_generator_config",
+    # "envoy.quic.crypto_stream.server.quiche":           "//source/extensions/quic/crypto_stream:envoy_quic_default_crypto_server_stream",
+    # "envoy.quic.proof_source.filter_chain":             "//source/extensions/quic/proof_source:envoy_quic_default_proof_source",
+    # "envoy.quic.server_preferred_address.fixed":        "//source/extensions/quic/server_preferred_address:fixed_server_preferred_address_config_factory_config",
 
     #
     # UDP packet writers
--- envoy/source/extensions/transport_sockets/tls/ocsp/asn1_utility.cc
+++ envoy/source/extensions/transport_sockets/tls/ocsp/asn1_utility.cc
@@ -88,12 +88,10 @@ ParsingResult<std::string> Asn1Utility::parseInteger(CBS& cbs) {
   CSmartPtr<ASN1_INTEGER, freeAsn1Integer> asn1_integer(
       c2i_ASN1_INTEGER(nullptr, &head, CBS_len(&num)));
   if (asn1_integer != nullptr) {
-    BIGNUM num_bn;
-    BN_init(&num_bn);
-    ASN1_INTEGER_to_BN(asn1_integer.get(), &num_bn);
+    bssl::UniquePtr<BIGNUM> num_bn {BN_new()};
+    ASN1_INTEGER_to_BN(asn1_integer.get(), num_bn.get());
 
-    CSmartPtr<char, freeOpensslString> char_hex_number(BN_bn2hex(&num_bn));
-    BN_free(&num_bn);
+    CSmartPtr<char, freeOpensslString> char_hex_number(BN_bn2hex(num_bn.get()));
     if (char_hex_number != nullptr) {
       std::string hex_number(char_hex_number.get());
       return hex_number;

