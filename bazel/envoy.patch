--- envoy/bazel/repositories.bzl
+++ envoy/bazel/repositories.bzl
@@ -142,18 +142,13 @@ def envoy_dependencies(skip_targets = []):
     # Setup external Bazel rules
     _foreign_cc_dependencies()
 
-    # Binding to an alias pointing to the selected version of BoringSSL:
-    # - BoringSSL FIPS from @boringssl_fips//:ssl,
-    # - non-FIPS BoringSSL from @boringssl//:ssl.
-    _boringssl()
-    _boringssl_fips()
     native.bind(
         name = "ssl",
-        actual = "@envoy//bazel:boringssl",
+        actual = "@bssl-compat//:bssl-compat",
     )
     native.bind(
         name = "crypto",
-        actual = "@envoy//bazel:boringcrypto",
+        actual = "@bssl-compat//:bssl-compat",
     )
 
     # The long repo names (`com_github_fmtlib_fmt` instead of `fmtlib`) are
--- envoy/source/extensions/extensions_build_config.bzl
+++ envoy/source/extensions/extensions_build_config.bzl
@@ -351,10 +351,10 @@ EXTENSIONS = {
     # QUIC extensions
     #
 
-    "envoy.quic.deterministic_connection_id_generator": "//source/extensions/quic/connection_id_generator:envoy_deterministic_connection_id_generator_config",
-    "envoy.quic.crypto_stream.server.quiche":           "//source/extensions/quic/crypto_stream:envoy_quic_default_crypto_server_stream",
-    "envoy.quic.proof_source.filter_chain":             "//source/extensions/quic/proof_source:envoy_quic_default_proof_source",
-    "envoy.quic.server_preferred_address.fixed":        "//source/extensions/quic/server_preferred_address:fixed_server_preferred_address_config_factory_config",
+    # "envoy.quic.deterministic_connection_id_generator": "//source/extensions/quic/connection_id_generator:envoy_deterministic_connection_id_generator_config",
+    # "envoy.quic.crypto_stream.server.quiche":           "//source/extensions/quic/crypto_stream:envoy_quic_default_crypto_server_stream",
+    # "envoy.quic.proof_source.filter_chain":             "//source/extensions/quic/proof_source:envoy_quic_default_proof_source",
+    # "envoy.quic.server_preferred_address.fixed":        "//source/extensions/quic/server_preferred_address:fixed_server_preferred_address_config_factory_config",
 
     #
     # UDP packet writers
--- envoy/source/extensions/transport_sockets/tls/ocsp/asn1_utility.cc
+++ envoy/source/extensions/transport_sockets/tls/ocsp/asn1_utility.cc
@@ -88,12 +88,10 @@ ParsingResult<std::string> Asn1Utility::parseInteger(CBS& cbs) {
   CSmartPtr<ASN1_INTEGER, freeAsn1Integer> asn1_integer(
       c2i_ASN1_INTEGER(nullptr, &head, CBS_len(&num)));
   if (asn1_integer != nullptr) {
-    BIGNUM num_bn;
-    BN_init(&num_bn);
-    ASN1_INTEGER_to_BN(asn1_integer.get(), &num_bn);
+    bssl::UniquePtr<BIGNUM> num_bn {BN_new()};
+    ASN1_INTEGER_to_BN(asn1_integer.get(), num_bn.get());
 
-    CSmartPtr<char, freeOpensslString> char_hex_number(BN_bn2hex(&num_bn));
-    BN_free(&num_bn);
+    CSmartPtr<char, freeOpensslString> char_hex_number(BN_bn2hex(num_bn.get()));
     if (char_hex_number != nullptr) {
       std::string hex_number(char_hex_number.get());
       return hex_number;
--- envoy/source/extensions/transport_sockets/tls/utility.cc
+++ envoy/source/extensions/transport_sockets/tls/utility.cc
@@ -177,11 +177,9 @@ inline bssl::UniquePtr<ASN1_TIME> currentASN1_Time(TimeSource& time_source) {
 
 std::string Utility::getSerialNumberFromCertificate(X509& cert) {
   ASN1_INTEGER* serial_number = X509_get_serialNumber(&cert);
-  BIGNUM num_bn;
-  BN_init(&num_bn);
-  ASN1_INTEGER_to_BN(serial_number, &num_bn);
-  char* char_serial_number = BN_bn2hex(&num_bn);
-  BN_free(&num_bn);
+  bssl::UniquePtr<BIGNUM> num_bn {BN_new()};
+  ASN1_INTEGER_to_BN(serial_number, num_bn.get());
+  char* char_serial_number = BN_bn2hex(num_bn.get());
   if (char_serial_number != nullptr) {
     std::string serial_number(char_serial_number);
     OPENSSL_free(char_serial_number);
--- envoy/source/extensions/transport_sockets/tls/io_handle_bio.cc
+++ envoy/source/extensions/transport_sockets/tls/io_handle_bio.cc
@@ -15,15 +15,14 @@ namespace {
 
 // NOLINTNEXTLINE(readability-identifier-naming)
 inline Envoy::Network::IoHandle* bio_io_handle(BIO* bio) {
-  return reinterpret_cast<Envoy::Network::IoHandle*>(bio->ptr);
+  return reinterpret_cast<Envoy::Network::IoHandle*>(BIO_get_data(bio));
 }
 
 // NOLINTNEXTLINE(readability-identifier-naming)
 int io_handle_new(BIO* bio) {
-  bio->init = 0;
-  bio->num = -1;
-  bio->ptr = nullptr;
-  bio->flags = 0;
+  BIO_set_init(bio, 0);
+  BIO_set_data(bio, nullptr);
+  BIO_clear_flags(bio);
   return 1;
 }
 
@@ -33,12 +32,12 @@ int io_handle_free(BIO* bio) {
     return 0;
   }
 
-  if (bio->shutdown) {
-    if (bio->init) {
+  if (BIO_get_shutdown(bio)) {
+    if (BIO_get_init(bio)) {
       bio_io_handle(bio)->close();
     }
-    bio->init = 0;
-    bio->flags = 0;
+    BIO_set_init(bio, 0);
+    BIO_clear_flags(bio);
   }
   return 1;
 }
@@ -97,10 +96,10 @@ long io_handle_ctrl(BIO* b, int cmd, long num, void*) {
     RELEASE_ASSERT(false, "should not be called");
     break;
   case BIO_CTRL_GET_CLOSE:
-    ret = b->shutdown;
+    ret = BIO_get_shutdown(b);
     break;
   case BIO_CTRL_SET_CLOSE:
-    b->shutdown = int(num);
+    BIO_set_shutdown(b, int(num));
     break;
   case BIO_CTRL_FLUSH:
     ret = 1;
@@ -133,10 +132,9 @@ BIO* BIO_new_io_handle(Envoy::Network::IoHandle* io_handle) {
   RELEASE_ASSERT(b != nullptr, "");
 
   // Initialize the BIO
-  b->num = -1;
-  b->ptr = io_handle;
-  b->shutdown = 0;
-  b->init = 1;
+  BIO_set_data(b, io_handle);
+  BIO_set_shutdown(b, 0);
+  BIO_set_init(b, 1);
 
   return b;
 }
