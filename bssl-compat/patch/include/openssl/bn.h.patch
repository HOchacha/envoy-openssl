--- boringssl/src/include/openssl/bn.h	2022-12-20 11:40:07.214841457 +0000
+++ include/openssl/bn.h	2023-01-24 10:37:50.917294507 +0000
@@ -962,42 +962,11 @@
 
 // Private functions
 
-struct bignum_st {
-  // d is a pointer to an array of |width| |BN_BITS2|-bit chunks in
-  // little-endian order. This stores the absolute value of the number.
-  BN_ULONG *d;
-  // width is the number of elements of |d| which are valid. This value is not
-  // necessarily minimal; the most-significant words of |d| may be zero.
-  // |width| determines a potentially loose upper-bound on the absolute value
-  // of the |BIGNUM|.
-  //
-  // Functions taking |BIGNUM| inputs must compute the same answer for all
-  // possible widths. |bn_minimal_width|, |bn_set_minimal_width|, and other
-  // helpers may be used to recover the minimal width, provided it is not
-  // secret. If it is secret, use a different algorithm. Functions may output
-  // minimal or non-minimal |BIGNUM|s depending on secrecy requirements, but
-  // those which cause widths to unboundedly grow beyond the minimal value
-  // should be documented such.
-  //
-  // Note this is different from historical |BIGNUM| semantics.
-  int width;
-  // dmax is number of elements of |d| which are allocated.
-  int dmax;
-  // neg is one if the number if negative and zero otherwise.
-  int neg;
-  // flags is a bitmask of |BN_FLG_*| values
-  int flags;
-};
+// The struct bignum_st has been removed because in the bssl-compat layer,
+// we redefine BIGNUM to the equivalent ossl_BIGNUM type from OpenSSL.
 
-struct bn_mont_ctx_st {
-  // RR is R^2, reduced modulo |N|. It is used to convert to Montgomery form. It
-  // is guaranteed to have the same width as |N|.
-  BIGNUM RR;
-  // N is the modulus. It is always stored in minimal form, so |N.width|
-  // determines R.
-  BIGNUM N;
-  BN_ULONG n0[2];  // least significant words of (R*Ri-1)/N
-};
+// The struct bn_mont_ctx_st has been removed because in the bssl-compat layer,
+// we redefine BN_MONT_CTX to the equivalent ossl_BN_MONT_CTX type from OpenSSL.
 
 OPENSSL_EXPORT unsigned BN_num_bits_word(BN_ULONG l);
 
